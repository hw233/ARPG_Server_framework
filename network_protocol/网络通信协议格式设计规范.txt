本文档对本网络游戏的“客户端-服务端”、“服务端-服务端”之间的网络通信协议设计进行说明：

1、网络通信采用“包头+包体”的形式来进行数据序列化。“包体”的数据格式为google protobuf v2.6.0版本生成的数据格式进行通信，而“包头”的数据格式有以下两种：
	1.1	在“客户端->服务端”的消息包中，包头为“包体长度[4字节]+消息号[4字节]+包序列号[4字节]+预留内容[4字节]”构成。
	1.2	在“服务端->客户端”的消息包中，包头为“包体长度[4字节]+消息号[4字节]+错误码[4字节]”构成。

2、通信协议的源文件后缀为“.proto”。本目录内仅存放协议源文件(.proto)，客户端/服务端工程内用到的协议定义文件由工具生成后，放入各自工程相应的目录中。

3、关于协议的命名规范：
	3.1 “客户端-服务端”通信协议源文件被定义在本目录内的<UserProto>文件夹内，文件命名格式为“UserProto+系统id.proto”。同一功能模块内的协议被定义在同一个proto文件内，比如“UserProto001.proto”，表示用来存放系统id=1的所有协议。
	3.2	“服务端-服务端”通信协议源文件被定义在本目录内的<ServerProto>文件夹内，文件命名格式同3.1定义。
	3.3 在具体的.proto协议文件内，message的命名规则为“UserProto+消息号”的格式，比如“UserProto001.proto”文件中，有这样的协议定义“message UserProto1004 { …… }”，“1004”表示它是系统id=1中的第4条消息协议。
	3.4 协议定义中，一般会有“请求”与“响应”配对的协议存在。原则上我们用尾数为单数的协议表示“请求”，用尾数为双数的协议表示“响应”，尽可能得做到格式统一，以便于通过消息号去观察某一条协议是“请求”还是“响应”。

4、在message的定义中，“客户端->服务端”的协议字段前缀一般为required，意味着必须要有这些字段；而“服务端->客户端”的协议字段前缀一般为optional，意味着或许存在这些内容，因为客户端要通过错误码去进行判断。
5、在“服务端->客户端”协议包头“错误码[4字节]”的定义中，通用值=0代表着该条协议不存在错误。